{
  "files": [
    {
      "file": "package.json",
      "functions": [],
      "classes": [],
      "comments": [],
      "content": "{\n  \"name\": \"campamentos-tropa-san-luis\",\n  \"version\": \"1.0.0\",\n  \"private\": true,\n  \"type\": \"module\",\n  \"scripts\": {\n    \"build\": \"rollup -c\",\n    \"dev\": \"rollup -c -w\",\n    \"start\": \"sirv public --no-clear\",\n    \"deploy\": \"npm run build && netlify deploy --prod\"\n  },\n  \"devDependencies\": {\n    \"@rollup/plugin-commonjs\": \"^24.1.0\",\n    \"@rollup/plugin-json\": \"^6.1.0\",\n    \"@rollup/plugin-node-resolve\": \"^15.3.1\",\n    \"@rollup/plugin-terser\": \"^0.4.4\",\n    \"rollup\": \"^3.29.5\",\n    \"rollup-plugin-css-only\": \"^4.5.2\",\n    \"rollup-plugin-livereload\": \"^2.0.5\",\n    \"rollup-plugin-svelte\": \"^7.2.2\",\n    \"svelte\": \"^3.59.2\"\n  },\n  \"dependencies\": {\n    \"d3\": \"^7.0.0\",\n    \"leaflet\": \"^1.9.4\",\n    \"scrollama\": \"^3.2.0\",\n    \"sirv-cli\": \"^2.0.0\"\n  }\n}\n"
    },
    {
      "file": "README.md",
      "functions": [],
      "classes": [],
      "comments": [],
      "content": "# Campamentos de la Tropa San Luis\n\nEste proyecto busca crear una **experiencia interactiva** que ilustre la historia de los campamentos de la Tropa San Luis a lo largo del tiempo. Utiliza tecnologías modernas de desarrollo web para **combinar** una línea de tiempo animada y un **mapa** que muestra las ubicaciones de los distintos campamentos a través de los años.\n\n---\n\n## 1. **Objetivo General**\n\nEl objetivo es **documentar y presentar** la trayectoria de los campamentos realizados por la Tropa San Luis, de modo que cualquiera pueda explorar:\n- **Fechas** y lugares de cada campamento.\n- **Anecdotario** o hechos relevantes que los marcaron.\n- **Ubicaciones geográficas** precisas, reflejadas en un mapa dinámico.\n\nSe busca que esta aplicación sea una **ventana al pasado** y una **fuente de inspiración** para nuevas generaciones de scouts, fomentando la **memoria histórica** de la tropa y su legado.\n\n---\n\n## 2. **Descripción de la Aplicación**\n\nLa aplicación se centra en dos elementos principales:\n\n1. **Línea de Tiempo (Timeline)**:  \n   - Muestra cada campamento en orden cronológico.  \n   - Cuando el usuario hace scroll, se activa la sección correspondiente de la línea de tiempo.  \n   - Al seleccionar un campamento, se despliega información detallada como año, nombre del lugar, fotografías y anécdotas.\n\n2. **Mapa Interactivo**:  \n   - Ubica cada campamento en un mapa estilizado (por ejemplo, el mapa de Chile).  \n   - Permite destacar la región en la que ocurrió el campamento activo en la línea de tiempo.  \n   - Opcionalmente, se pueden mostrar trayectorias o rutas de viaje si corresponde.\n\n---\n\n## 3. **Características Principales**\n\n- **Diseño Responsivo**:  \n  La aplicación está pensada para funcionar tanto en pantallas de escritorio como en dispositivos móviles, ajustando la línea de tiempo y el mapa de manera dinámica.\n\n- **Animaciones y Transiciones**:  \n  Se implementan efectos de transición fluidos para que la navegación por la línea de tiempo y el mapa sea agradable y atractiva, evitando saturar la experiencia de usuario.\n\n- **Información Adicional**:  \n  Cada campamento puede incluir detalles como:  \n  - **Fotos históricas**.  \n  - **Crónicas** o anécdotas.  \n  - **Fuentes de información** y enlaces externos para profundizar.\n\n- **Facilidad de Mantenimiento**:  \n  Los datos se separan en archivos (por ejemplo, `campamentos.json`), permitiendo actualizarlos sin afectar la estructura de la aplicación.  \n  Además, la base del proyecto en Svelte facilita la escalabilidad.\n\n---\n\n## 4. **Público Objetivo**\n\n1. **Miembros de la Tropa San Luis**:  \n   Que deseen recordar o conocer la historia de los campamentos pasados.\n\n2. **Comunidad Scout**:  \n   Interesados en descubrir las actividades, metodologías y anécdotas que surgen de cada campamento.\n\n3. **Historiadores y Entusiastas**:  \n   Personas que quieran recopilar datos sobre la evolución de grupos de exploración y su contexto cultural.\n\n---\n\n## 5. **Alcance y Futuras Extensiones**\n\n1. **Agregar Más Datos**:  \n   - Incluir testimonios orales, videos o audio-relatos.  \n   - Ampliar el contenido con documentos históricos digitalizados.\n\n2. **Gestor de Contenidos (Backend)**:  \n   - Implementar una base de datos para almacenar y gestionar la información de forma colaborativa.  \n   - Crear paneles de administración para que los líderes scouts o encargados puedan subir datos de nuevos campamentos.\n\n3. **Integración de Redes Sociales**:  \n   - Permitir que los usuarios compartan instantáneas históricas o anécdotas en sus redes sociales.  \n   - Añadir comentarios o foros de discusión.\n\n---\n\n## 6. **Tecnologías Propuestas**\n\n- **Svelte**: Manejo de la interfaz de usuario de forma reactiva y eficiente.  \n- **D3.js**: Renderizado y manipulación de elementos gráficos (mapas, diagramas).  \n- **Scrollama.js**: Sincronización de eventos según el desplazamiento vertical (scroll).  \n- **(Opcional) Backend**: Node.js, Flask o cualquier framework que permita proveer datos dinámicos o autenticación si se requiere en el futuro.  \n- **Hosting**: Servicios como Vercel o Netlify para un despliegue ágil y sin complicaciones.\n\n---\n\n## 7. **Cómo Usar la Aplicación**\n\nEl **flujo de navegación** básico es el siguiente:\n\n1. **Página de Inicio**: Presenta una introducción al proyecto y la línea de tiempo que se puede comenzar a recorrer.  \n2. **Scroll para Avanzar**: A medida que el usuario hace scroll, se activan distintos campamentos en la línea de tiempo, resaltando la sección y mostrando detalles.  \n3. **Mapa Interactivo**: Cuando un campamento se activa, el mapa se centra en la ubicación correspondiente, mostrando un marcador y/o resaltando la región en color.  \n4. **Explorar Detalles**: El usuario puede hacer clic en la tarjeta del campamento para ver más información: fotos, anécdotas, datos curiosos, etc.\n\n---\n\n## 8. **Contribución**\n\nSi deseas **colaborar con el proyecto**, ya sea añadiendo más datos históricos, optimizando el código o traduciendo la aplicación a otros idiomas:\n\n1. **Revisar la Estructura de Archivos**: Ver cómo se organizan los componentes y los datos en la carpeta `src/` y `data/`.  \n2. **Seguir las Convenciones de Documentación**: Incluir comentarios claros para cada nueva función o componente.  \n3. **Proponer Mejoras**: Cualquier idea para mejorar la interactividad o la presentación es bienvenida.\n\n---\n\n## 9. **Licencia**\n\nEl contenido histórico, fotografías y anécdotas puede estar sujeto a **derechos de autor** pertenecientes a la Tropa San Luis y sus miembros. El código de la aplicación puede licenciarse bajo términos abiertos (por ejemplo, [MIT License](https://opensource.org/licenses/MIT)) para fomentar su uso y adaptación en otros proyectos educativos o scouts.\n\n---\n\n## 10. **Contacto**\n\n- **Desarrolladores**: Para temas técnicos (Svelte, D3, scroll interacciones).\n- **Líderes Scout Tropa San Luis**: Para información histórica o validación de datos.\n- **Comunidad**: Para sugerencias o contribuciones generales.\n\n¡Gracias por tu interés en este proyecto! Tu participación y retroalimentación ayudan a **preservar** y **compartir** la rica historia de la Tropa San Luis."
    },
    {
      "file": "rollup.config.js",
      "functions": [
        "serve",
        "toExit"
      ],
      "classes": [],
      "comments": [],
      "content": "import svelte from 'rollup-plugin-svelte';\nimport commonjs from '@rollup/plugin-commonjs';\nimport resolve from '@rollup/plugin-node-resolve';\nimport livereload from 'rollup-plugin-livereload';\nimport terser from '@rollup/plugin-terser';\nimport css from 'rollup-plugin-css-only';\nimport { spawn } from 'child_process';\nimport json from '@rollup/plugin-json';\n\nconst production = !process.env.ROLLUP_WATCH;\n\nfunction serve() {\n  let server;\n\n  function toExit() {\n    if (server) server.kill(0);\n  }\n\n  return {\n    writeBundle() {\n      if (server) return;\n      server = spawn('npm', ['run', 'start', '--', '--dev'], {\n        stdio: ['ignore', 'inherit', 'inherit'],\n        shell: true\n      });\n\n      process.on('SIGTERM', toExit);\n      process.on('exit', toExit);\n    }\n  };\n}\n\nconst config = {\n  input: 'src/main.js',\n  output: {\n    sourcemap: true,\n    format: 'iife',\n    name: 'app',\n    file: 'public/build/bundle.js'\n  },\n  plugins: [\n    json(),\n    svelte({\n      compilerOptions: {\n        dev: !production\n      }\n    }),\n    css({ output: 'bundle.css' }),\n    resolve({\n      browser: true,\n      dedupe: ['svelte']\n    }),\n    commonjs(),\n    !production && serve(),\n    !production && livereload('public'),\n    production && terser()\n  ].filter(Boolean),\n  watch: {\n    clearScreen: false\n  }\n};\n\nexport default config; "
    },
    {
      "file": "svelte.config.js",
      "functions": [],
      "classes": [],
      "comments": [],
      "content": "const config = {\n  kit: {\n    alias: {\n      '$components': 'src/components',\n      '$stores': 'src/stores',\n      '$styles': 'src/styles'\n    }\n  }\n};\n\nexport default config; "
    },
    {
      "file": "data\\campamentos.json",
      "functions": [],
      "classes": [],
      "comments": [],
      "content": "{\n  \"campamentos\": [\n    {\n      \"id\": 1,\n      \"año\": \"1953\",\n      \"lugar\": \"San Fabián\",\n      \"coordenadas\": {\n        \"lat\": -27.2869,\n        \"lng\": -66.18\n      },\n      "
    },
    {
      "file": "data\\regiones.json",
      "functions": [],
      "classes": [],
      "comments": [],
      "content": "{\"type\":\"FeatureCollection\", \"features\": [\n{\"type\":\"Feature\",\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[-68.95020116247055,-18.93666603287476],[-68.95815387132404,-18."
    },
    {
      "file": "public\\global.css",
      "functions": [],
      "classes": [],
      "comments": [],
      "content": ":root {\n  /* Paleta de Colores Propuesta */\n  --primary-color: #027ba8;    /* Color principal (azul) */\n  --secondary-color: #f13232;  /* Color secundario (rojo) */\n  --accent-color: #212738;     /* Color de acento (oscuro) */\n  --highlight-color: #d1d646;  /* Color para resaltar elementos (amarillo verdoso) */\n  --background-color: #edf2ef; /* Color de fondo (muy claro) */\n\n  /* Variantes del color principal */\n  --primary-light: #3b9ec7;    /* Una variante más clara del color principal */\n  --primary-dark: #01577b;     /* Una variante más oscura */\n\n  /* Variables que ya tenías, las dejamos o ajustamos según convenga */\n  --gray-100: #f8f9fa;\n  --gray-200: #e9ecef;\n  --gray-300: #dee2e6;\n  --gray-400: #ced4da;\n  --gray-500: #adb5bd;\n\n  /* Ejemplo: Gradiente para la línea de tiempo */\n  --timeline-gradient: linear-gradient(180deg, var(--primary-color) 0%, var(--primary-dark) 100%);\n\n  --card-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1),\n                 0 2px 4px -1px rgba(0, 0, 0, 0.06);\n  --card-shadow-hover: 0 10px 15px -3px rgba(0, 0, 0, 0.1),\n                        0 4px 6px -2px rgba(0, 0, 0, 0.05);\n  --title-font: 'Barriecito', cursive;\n}\n\n\n* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n  scrollbar-width: none; /* Firefox */\n  -ms-overflow-style: none; /* IE and Edge */\n}\n\n*::-webkit-scrollbar {\n  display: none; /* Chrome, Safari, Opera */\n}\n\nbody {\n  font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Montserrat, Roboto, Oxygen-Sans, Ubuntu, Cantarell, 'Helvetica Neue', sans-serif;\n  background-color: var(--background-color);\n  color: var(--text-color);\n  min-height: 100vh;\n  line-height: 1.6;\n} "
    },
    {
      "file": "public\\index.html",
      "functions": [],
      "classes": [],
      "comments": [],
      "content": "<!DOCTYPE html>\n<html lang=\"es\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width,initial-scale=1\">\n\n  <title>Campamentos Tropa San Luis</title>\n\n  <link href=\"https://fonts.googleapis.com/css2?family=Bagel+Fat+One&family=Barriecito&family=Montserrat:ital,wght@0,100..900;1,100..900&family=Space+Grotesk:wght@300..700&display=swap\" rel=\"stylesheet\">\n  <link rel=\"stylesheet\" href=\"/global.css\">\n  <link rel=\"stylesheet\" href=\"/build/bundle.css\">\n\n  <script defer src=\"/build/bundle.js\"></script>\n</head>\n\n<body>\n</body>\n</html> "
    },
    {
      "file": "src\\App.svelte",
      "functions": [
        "scrollToDecade"
      ],
      "classes": [],
      "comments": [
        "Usamos el fondo claro de la paleta",
        "Color principal: azul",
        "Usamos el acento oscuro para el texto secundario"
      ],
      "content": "<script>\n  import { onMount } from 'svelte';\n  import Timeline from './components/Timeline.svelte';\n  import Map from './components/Map.svelte';\n  import CampInfo from './components/CampInfo.svelte';\n  import Sidebar from './components/Sidebar.svelte';\n  import { campStore } from './stores/campData';\n\n  let currentDecade = null;\n\n  function scrollToDecade(decade) {\n    const element = document.querySelector(`[data-decade=\"${decade}\"]`);\n    if (element) {\n      element.scrollIntoView({ behavior: 'smooth' });\n    }\n  }\n</script>\n\n<main>\n  <header>\n    <h1>Campamentos de la Tropa San Luis</h1>\n    <p class=\"subtitle\">\n      Explora la historia de nuestros campamentos desde 1953 hasta la actualidad. \n      Cada punto en esta línea del tiempo representa una aventura, un momento de aprendizaje \n      y una historia que contar.\n    </p>\n  </header>\n\n  <div class=\"content-wrapper\">\n    <Sidebar {currentDecade} onDecadeSelect={scrollToDecade} />\n    \n    <div class=\"main-content\">\n      <div class=\"timeline-section\">\n        <Timeline bind:currentDecade />\n      </div>\n      \n      <div class=\"fixed-section\">\n        <div class=\"map-container\">\n          <Map />\n          {#if $campStore.selectedCamp}\n            <div class=\"info-overlay\">\n              <CampInfo />\n            </div>\n          {/if}\n        </div>\n      </div>\n    </div>\n  </div>\n</main>\n\n<style>\n  main {\n    width: 100%;\n    min-height: 100vh;\n    background: var(--background-color);\n  }\n\n  header {\n    padding: 4rem 2rem;\n    text-align: center;\n    background: var(--background-color); /* Usamos el fondo claro de la paleta */\n    border-bottom: 1px solid var(--gray-200);\n  }\n\n  header h1 {\n    font-family: var(--title-font);\n    color: var(--primary-color); /* Color principal: azul */\n    margin-bottom: 1.5rem;\n    font-weight: 800;\n    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.1);\n    position: relative;\n  }\n\n  header h1::after {\n    content: '';\n    position: absolute;\n    bottom: -10px;\n    left: 50%;\n    transform: translateX(-50%);\n    width: 100px;\n    height: 4px;\n    background: var(--primary-color);\n    border-radius: 2px;\n  }\n\n  .subtitle {\n    color: var(--accent-color); /* Usamos el acento oscuro para el texto secundario */\n    max-width: 800px;\n    margin: 2rem auto 0;\n    line-height: 1.6;\n    opacity: 0.8;\n  }\n\n  .content-wrapper {\n    display: flex;\n    position: relative;\n  }\n\n  .main-content {\n    flex: 1;\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    gap: 2rem;\n    padding: 2rem;\n  }\n\n  .timeline-section {\n    position: relative;\n  }\n\n  .fixed-section {\n    position: sticky;\n    top: 2rem;\n    height: calc(100vh - 4rem);\n  }\n\n  .map-container {\n    background: white;\n    border-radius: 12px;\n    box-shadow: var(--card-shadow);\n    height: 100%;\n    position: relative;\n    overflow: hidden;\n  }\n\n  .info-overlay {\n    position: absolute;\n    top: 1rem;\n    right: 1rem;\n    width: 300px;\n    max-height: calc(100% - 2rem);\n    background: white;\n    border-radius: 8px;\n    box-shadow: var(--card-shadow-hover);\n    overflow: auto;\n    animation: slideIn 0.3s ease-out;\n  }\n\n  @keyframes slideIn {\n    from {\n      transform: translateX(100%);\n      opacity: 0;\n    }\n    to {\n      transform: translateX(0);\n      opacity: 1;\n    }\n  }\n\n  header h1 {\n    font-family: var(--title-font);\n  }\n  h1 {\n    color: var(--primary-color);\n    margin-bottom: 1.5rem;\n    font-weight: 800;\n    text-shadow: 2px 2px 4px rgba(0,0,0,0.1);\n    position: relative;\n  }\n\n  h1::after {\n    content: '';\n    position: absolute;\n    bottom: -10px;\n    left: 50%;\n    transform: translateX(-50%);\n    width: 100px;\n    height: 4px;\n    background: var(--primary-color);\n    border-radius: 2px;\n  }\n\n  .subtitle {\n    color: var(--accent-color);\n    max-width: 800px;\n    margin: 2rem auto 0;\n    line-height: 1.6;\n    opacity: 0.8;\n  }\n\n  @media (max-width: 1200px) {\n    .content-wrapper {\n      flex-direction: column;\n    }\n\n    .main-content {\n      grid-template-columns: 1fr;\n    }\n\n    .timeline-section,\n    .fixed-section {\n      height: 70vh;\n    }\n\n    .info-overlay {\n      width: calc(100% - 2rem);\n      max-height: 300px;\n    }\n  }\n\n  @media (max-width: 768px) {\n    h1 {\n      font-size: 2.5rem;\n    }\n\n    .subtitle {\n      font-size: 1rem;\n      padding: 0 1rem;\n    }\n  }\n</style> "
    },
    {
      "file": "src\\main.js",
      "functions": [],
      "classes": [],
      "comments": [],
      "content": "import App from './App.svelte';\n\nconst app = new App({\n  target: document.body\n});\n\nexport default app; "
    },
    {
      "file": "src\\components\\CampInfo.svelte",
      "functions": [],
      "classes": [],
      "comments": [],
      "content": "<script>\n  import { campStore } from '../stores/campData';\n\n  $: selectedCamp = $campStore.selectedCamp;\n</script>\n\n<div class=\"camp-info\">\n  {#if selectedCamp}\n    <h2>{selectedCamp.lugar}</h2>\n    <h3>Año: {selectedCamp.año}</h3>\n    <p>{selectedCamp.descripcion}</p>\n    {#if selectedCamp.imagenes && selectedCamp.imagenes.length > 0}\n      <div class=\"images-container\">\n        {#each selectedCamp.imagenes as imagen}\n          <img src={imagen} alt={`Campamento en ${selectedCamp.lugar}`} />\n        {/each}\n      </div>\n    {/if}\n  {:else}\n    <div class=\"placeholder\">\n      <p>Selecciona un campamento en la línea de tiempo para ver su información</p>\n    </div>\n  {/if}\n</div>\n\n<style>\n  .camp-info {\n    padding: 1rem;\n    background: white;\n    border-radius: 8px;\n    box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n    height: 100%;\n    overflow-y: auto;\n  }\n\n  h2 {\n    color: var(--primary-color, #3498db);\n    margin: 0 0 0.5rem 0;\n  }\n\n  h3 {\n    color: #666;\n    font-size: 1.1rem;\n    margin: 0 0 1rem 0;\n  }\n\n  .images-container {\n    margin-top: 1rem;\n    display: grid;\n    gap: 1rem;\n    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));\n  }\n\n  img {\n    width: 100%;\n    height: auto;\n    border-radius: 4px;\n  }\n\n  .placeholder {\n    height: 100%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    text-align: center;\n    color: #666;\n  }\n</style> "
    },
    {
      "file": "src\\components\\Map.svelte",
      "functions": [
        "drawMap",
        "zoomToLocation"
      ],
      "classes": [],
      "comments": [
        "Variable para el zoom de D3",
        "Variables globales para el SVG, grupo principal, grupo de marcadores y la proyección",
        "Reactividad: actualiza \"camps\" y \"selectedCamp\" cuando cambia el store",
        "Definir la proyección y el generador de caminos (guardamos la proyección globalmente)",
        "Crear el SVG y el grupo principal (guardamos en variables globales)",
        "Crear el tooltip para mostrar información de cada campamento",
        "Cargar los datos geográficos (regiones de Chile)",
        "Dibujar las regiones con estilo pastel y trazos suaves",
        "Crear el grupo para los marcadores y guardarlo en variable global",
        "Efecto de aparición",
        "Si este marcador NO es el seleccionado, vuelve a su radio normal",
        "Deselecciona",
        "Actualiza la visualización: desmarca todos y marca el seleccionado",
        "Transición de aparición de los marcadores (de radio 0 a 5)",
        "Configurar zoom y pan",
        "Panel de controles de navegación",
        "Función para centrar y hacer zoom en la ubicación seleccionada",
        "Bloque reactivo: cada vez que selectedCamp cambia, se hace zoom hacia él y se actualizan estilos",
        "Basado en el background claro",
        "Estilo para el marcador seleccionado: ahora con borde sutil negro",
        "Usamos el color acento oscuro para un borde destacado"
      ],
      "content": "<script>\n  import { onMount } from 'svelte';\n  import * as d3 from 'd3';\n  import { campStore } from '../stores/campData';\n  import regionesData from '../../data/regiones.json';\n\n  let mapContainer;\n  let camps = [];\n  let geoData;\n  let zoom; // Variable para el zoom de D3\n\n  // Variables globales para el SVG, grupo principal, grupo de marcadores y la proyección\n  let svg, g, markersGroup, projection;\n\n  // Reactividad: actualiza \"camps\" y \"selectedCamp\" cuando cambia el store\n  $: camps = $campStore.camps;\n  $: selectedCamp = $campStore.selectedCamp;\n\n  async function drawMap() {\n    const width = mapContainer.clientWidth || 800;\n    const height = mapContainer.clientHeight || 800;\n\n    // Definir la proyección y el generador de caminos (guardamos la proyección globalmente)\n    projection = d3.geoMercator()\n      .scale(800)\n      .center([-60, -35]);\n    const path = d3.geoPath().projection(projection);\n\n    // Crear el SVG y el grupo principal (guardamos en variables globales)\n    svg = d3.select(mapContainer)\n      .append('svg')\n      .attr('width', width)\n      .attr('height', height);\n    g = svg.append('g');\n\n    // Crear el tooltip para mostrar información de cada campamento\n    const tooltip = d3.select(mapContainer)\n      .append('div')\n      .attr('class', 'tooltip')\n      .style('position', 'absolute')\n      .style('pointer-events', 'none')\n      .style('background', 'rgba(255,255,255,0.9)')\n      .style('padding', '5px 10px')\n      .style('border', '1px solid #ccc')\n      .style('border-radius', '4px')\n      .style('font-size', '0.8rem')\n      .style('opacity', 0);\n\n    // Cargar los datos geográficos (regiones de Chile)\n    geoData = regionesData;\n\n    // Dibujar las regiones con estilo pastel y trazos suaves\n    const regionsGroup = g.append('g')\n      .attr('class', 'regions')\n      .selectAll('path')\n      .data(geoData.features)\n      .enter()\n      .append('path')\n      .attr('d', path)\n      .attr('fill', '#eef6f7')\n      .attr('stroke', '#c0d6df')\n      .attr('stroke-width', 1);\n\n    // Crear el grupo para los marcadores y guardarlo en variable global\n    markersGroup = g.append('g')\n      .attr('class', 'markers');\n\n    const markers = markersGroup.selectAll('circle')\n      .data(camps, d => d.id)\n      .join('circle')\n      .attr('cx', d => projection([d.lng, d.lat])[0])\n      .attr('cy', d => projection([d.lng, d.lat])[1])\n      .attr('r', 0) // Efecto de aparición\n      .attr('fill', '#f13232')\n      .attr('stroke', '#fff')\n      .attr('stroke-width', 1)\n      .style('cursor', 'pointer')\n      .on('mouseover', function(event, d) {\n         d3.select(this)\n           .transition().duration(200)\n           .attr('r', 8);\n         tooltip.transition().duration(200).style('opacity', 0.9);\n         tooltip.html(`<strong>${d.lugar}</strong><br/>Año: ${d.año}`)\n           .style('left', (event.pageX + 10) + 'px')\n           .style('top', (event.pageY - 28) + 'px');\n      })\n      .on('mouseout', function(event, d) {\n         // Si este marcador NO es el seleccionado, vuelve a su radio normal\n         if (!selectedCamp || selectedCamp.id !== d.id) {\n           d3.select(this)\n             .transition().duration(200)\n             .attr('r', 5);\n         }\n         tooltip.transition().duration(200).style('opacity', 0);\n      })\n      .on('click', function(event, d) {\n         if (selectedCamp && selectedCamp.id === d.id) {\n           campStore.reset(); // Deselecciona\n           markersGroup.selectAll('circle')\n             .transition().duration(200)\n             .attr('r', 5)\n             .classed('selected', false);\n         } else {\n           const coords = projection([d.lng, d.lat]);\n           zoomToLocation(svg, g, coords, width, height);\n           campStore.selectCamp(d);\n           // Actualiza la visualización: desmarca todos y marca el seleccionado\n           markersGroup.selectAll('circle')\n             .classed('selected', false)\n             .transition().duration(200)\n             .attr('r', 5);\n           d3.select(this)\n             .classed('selected', true)\n             .transition().duration(200)\n             .attr('r', 9);\n         }\n      });\n\n    // Transición de aparición de los marcadores (de radio 0 a 5)\n    markers.transition().duration(1000)\n      .attr('r', 5);\n\n    // Configurar zoom y pan\n    zoom = d3.zoom()\n      .scaleExtent([1, 8])\n      .on('zoom', (event) => {\n        g.attr('transform', event.transform);\n      });\n    svg.call(zoom);\n\n    // Panel de controles de navegación\n    const controls = d3.select(mapContainer)\n      .append('div')\n      .attr('class', 'map-controls')\n      .style('position', 'absolute')\n      .style('bottom', '10px')\n      .style('right', '10px')\n      .style('display', 'flex')\n      .style('flex-direction', 'column')\n      .style('gap', '4px');\n\n    controls.append('button')\n      .attr('class', 'zoom-in')\n      .text('+')\n      .on('click', () => {\n         svg.transition().duration(750)\n            .call(zoom.scaleBy, 1.2);\n      });\n    controls.append('button')\n      .attr('class', 'zoom-out')\n      .text('–')\n      .on('click', () => {\n         svg.transition().duration(750)\n            .call(zoom.scaleBy, 0.8);\n      });\n    controls.append('button')\n      .attr('class', 'reset-button')\n      .text('Reiniciar zoom')\n      .on('click', () => {\n         svg.transition().duration(750)\n           .call(zoom.transform, d3.zoomIdentity);\n      });\n  }\n\n  // Función para centrar y hacer zoom en la ubicación seleccionada\n  function zoomToLocation(svg, g, coords, width, height) {\n    const scale = 4;\n    const translate = [\n      width / 2 - scale * coords[0],\n      height / 2 - scale * coords[1]\n    ];\n    svg.transition().duration(750)\n       .call(zoom.transform, d3.zoomIdentity.translate(translate[0], translate[1]).scale(scale));\n  }\n\n  // Bloque reactivo: cada vez que selectedCamp cambia, se hace zoom hacia él y se actualizan estilos\n  $: if (selectedCamp && svg && g) {\n    const width = mapContainer.clientWidth || 800;\n    const height = mapContainer.clientHeight || 800;\n    const coords = projection([selectedCamp.lng, selectedCamp.lat]);\n    zoomToLocation(svg, g, coords, width, height);\n\n    markersGroup.selectAll('circle')\n      .classed('selected', d => selectedCamp && d.id === selectedCamp.id)\n      .transition().duration(200)\n      .attr('r', d => (selectedCamp && d.id === selectedCamp.id) ? 9 : 5);\n  }\n\n  onMount(() => {\n    drawMap();\n  });\n</script>\n\n<style>\n  :host {\n    position: relative;\n  }\n\n  :global(.tooltip) {\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);\n  }\n\n  :global(.map-controls button) {\n    background-color: rgba(237, 242, 239, 0.7); /* Basado en el background claro */\n    border: none;\n    border-radius: 4px;\n    cursor: pointer;\n    padding: 4px 8px;\n    font-size: 1rem;\n  }\n\n  /* Estilo para el marcador seleccionado: ahora con borde sutil negro */\n  :global(.selected) {\n    stroke: #212738; /* Usamos el color acento oscuro para un borde destacado */\n    stroke-width: 2;\n  }\n</style>\n\n<div bind:this={mapContainer} style=\"width: 100%; height: 100%;\"></div>\n"
    },
    {
      "file": "src\\components\\Sidebar.svelte",
      "functions": [
        "handleDecadeClick"
      ],
      "classes": [],
      "comments": [],
      "content": "<script>\n  import { campStore } from '../stores/campData';\n\n  export let currentDecade;\n  export let onDecadeSelect;\n\n  $: decades = [...new Set($campStore.camps.map(camp => \n    Math.floor(parseInt(camp.año) / 10) * 10\n  ))].sort();\n\n  function handleDecadeClick(decade) {\n    onDecadeSelect(decade);\n  }\n</script>\n\n<aside class=\"sidebar\">\n  <nav>\n    {#each decades as decade}\n      <button\n        class=\"decade-button\"\n        class:active={currentDecade === decade}\n        on:click={() => handleDecadeClick(decade)}\n      >\n        <span class=\"decade-dot\"></span>\n        <span class=\"decade-label\">{decade}s</span>\n      </button>\n    {/each}\n  </nav>\n</aside>\n\n<style>\n  .sidebar {\n    width: 120px;\n    background: white;\n    border-right: 1px solid var(--gray-200);\n    position: sticky;\n    top: 0;\n    height: 100vh;\n    padding: 2rem 0;\n  }\n\n  nav {\n    display: flex;\n    flex-direction: column;\n    gap: 1rem;\n    align-items: center;\n  }\n\n  .decade-button {\n    background: none;\n    border: none;\n    padding: 0.5rem;\n    cursor: pointer;\n    display: flex;\n    align-items: center;\n    gap: 0.5rem;\n    width: 100%;\n    transition: all 0.3s ease;\n  }\n\n  .decade-dot {\n    width: 8px;\n    height: 8px;\n    border-radius: 50%;\n    background: var(--gray-300);\n    transition: all 0.3s ease;\n  }\n\n  .decade-label {\n    font-size: 0.9rem;\n    color: var(--gray-500);\n    transition: all 0.3s ease;\n  }\n\n  .decade-button:hover .decade-dot,\n  .decade-button.active .decade-dot {\n    background: var(--primary-color);\n    transform: scale(1.5);\n  }\n\n  .decade-button:hover .decade-label,\n  .decade-button.active .decade-label {\n    color: var(--primary-color);\n    font-weight: 600;\n  }\n</style> "
    },
    {
      "file": "src\\components\\Timeline.svelte",
      "functions": [
        "selectCamp",
        "getAllDecades",
        "getRelativePosition",
        "getTimelineHeight",
        "getCampPosition",
        "getCampsInDecade"
      ],
      "classes": [],
      "comments": [
        "Props",
        "Ordenar campamentos por año y agrupar por década",
        "Calcular todas las décadas desde 1950 hasta la actualidad",
        "Para incluir la fundación en 1952",
        "Modificar el cálculo de posición para alinear todo correctamente",
        "Espaciado de 120px por año",
        "Ajuste de padding",
        "Posición de los campamentos dentro de cada década",
        "Agrupar campamentos por década",
        "Agregar año de fundación",
        "Observer para los pasos del timeline (ya existía)",
        "--- Generar las tres líneas de la timeline con un sutil \"ruido\" ---",
        "Asumimos que timelineContainer es el div con clase \"timeline-container\"",
        "Y que dentro del contenedor de la línea tenemos el SVG que ahora tiene la clase \"timeline-lines\"",
        "Usamos el alto del contenedor (puedes ajustar si es necesario)",
        "ancho arbitrario para dibujar las líneas",
        "Usamos D3 para generar las líneas. Usamos una línea base vertical.",
        "Configuraciones para las tres líneas:",
        "Generamos datos de puntos a intervalos regulares",
        "Para cada configuración, generar la línea",
        "jitter sutil",
        "Conservamos el ancho original para la posición, aunque el SVG interno tenga ancho mayor",
        "Eliminamos el estilo original de .timeline-line, pues ahora usamos el SVG",
        "Utilizamos el color secundario (rojo)",
        "Estilos para las líneas de las décadas y demás elementos del timeline",
        "Azul para las décadas",
        "Hover effects"
      ],
      "content": "<script>\n  import { onMount } from 'svelte';\n  import { campStore } from '../stores/campData';\n  import * as d3 from 'd3';\n\n  // Props\n  export let height = '100%';\n  export let width = '100%';\n\n  let timelineContainer;\n  let selectedYear = null;\n  let visibleYears = new Set();\n\n  // Ordenar campamentos por año y agrupar por década\n  $: sortedCamps = $campStore.camps.sort((a, b) =>\n    parseInt(a.año) - parseInt(b.año)\n  );\n\n  $: decades = sortedCamps.reduce((acc, camp) => {\n    const decade = Math.floor(parseInt(camp.año) / 10) * 10;\n    if (!acc[decade]) acc[decade] = [];\n    acc[decade].push(camp);\n    return acc;\n  }, {});\n\n  function selectCamp(camp) {\n    selectedYear = camp.año;\n    campStore.selectCamp(camp);\n  }\n\n  // Calcular todas las décadas desde 1950 hasta la actualidad\n  function getAllDecades() {\n    const startDecade = 1950; // Para incluir la fundación en 1952\n    const currentYear = new Date().getFullYear();\n    const endDecade = Math.floor(currentYear / 10) * 10;\n\n    let decades = [];\n    for (let decade = startDecade; decade <= endDecade; decade += 10) {\n      decades.push(decade);\n    }\n    return decades;\n  }\n\n  $: allDecades = getAllDecades();\n\n  // Modificar el cálculo de posición para alinear todo correctamente\n  function getRelativePosition(año) {\n    const startYear = 1950;\n    return ((parseInt(año) - startYear) * 120); // Espaciado de 120px por año\n  }\n\n  function getTimelineHeight() {\n    const currentYear = new Date().getFullYear();\n    const years = currentYear - 1950;\n    return `${(years * 120) + 600}px`; // Ajuste de padding\n  }\n\n  // Posición de los campamentos dentro de cada década\n  function getCampPosition(campYear, decadeYear) {\n    return (parseInt(campYear) - parseInt(decadeYear)) * 120;\n  }\n\n  // Agrupar campamentos por década\n  function getCampsInDecade(decade) {\n    return sortedCamps.filter(camp => {\n      const campDecade = Math.floor(parseInt(camp.año) / 10) * 10;\n      return campDecade === decade;\n    });\n  }\n\n  // Agregar año de fundación\n  const TROPA_INICIO = 1952;\n  const fundacionEvent = {\n    año: TROPA_INICIO,\n    lugar: \"Fundación de la Tropa San Luis\",\n    tipo: \"fundacion\"\n  };\n\n  onMount(() => {\n    // Observer para los pasos del timeline (ya existía)\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach(entry => {\n        const year = entry.target.dataset.year;\n        if (entry.isIntersecting) {\n          visibleYears = new Set([...visibleYears, year]);\n        }\n      });\n    }, {\n      threshold: 0.5,\n      rootMargin: '0px 0px -10% 0px'\n    });\n\n    document.querySelectorAll('.timeline-step').forEach(el => {\n      observer.observe(el);\n    });\n\n    // --- Generar las tres líneas de la timeline con un sutil \"ruido\" ---\n    // Asumimos que timelineContainer es el div con clase \"timeline-container\"\n    // Y que dentro del contenedor de la línea tenemos el SVG que ahora tiene la clase \"timeline-lines\"\n    const svgLines = document.querySelector('.timeline-line-container .timeline-lines');\n    // Usamos el alto del contenedor (puedes ajustar si es necesario)\n    const containerHeight = timelineContainer.clientHeight;\n    const svgWidth = 20; // ancho arbitrario para dibujar las líneas\n    const svgHeight = containerHeight;\n    svgLines.setAttribute('width', svgWidth);\n    svgLines.setAttribute('height', svgHeight);\n    svgLines.setAttribute('viewBox', `0 0 ${svgWidth} ${svgHeight}`);\n\n    // Usamos D3 para generar las líneas. Usamos una línea base vertical.\n    const lineGenerator = d3.line()\n      .x(d => d.x)\n      .y(d => d.y)\n      .curve(d3.curveBasis);\n\n    // Configuraciones para las tres líneas:\n    const lineConfigs = [\n      { baseline: 3, color: '#f13232', amplitude: 1.5, frequency: 0.02, phase: Math.random() * Math.PI * 2 },\n      { baseline: 6, color: '#d42020', amplitude: 1.6, frequency: 0.018, phase: Math.random() * Math.PI * 7 },\n    ];\n\n    // Generamos datos de puntos a intervalos regulares\n    const points = d3.range(0, svgHeight + 1, 5).map(y => ({ y }));\n\n    // Para cada configuración, generar la línea\n    lineConfigs.forEach(config => {\n      const lineData = points.map(p => {\n        const jitter = (Math.random() - 0.5) * 0.5; // jitter sutil\n        return {\n          x: config.baseline + config.amplitude * Math.sin(config.frequency * p.y + config.phase) + jitter,\n          y: p.y\n        };\n      });\n      d3.select(svgLines)\n        .append('path')\n        .attr('d', lineGenerator(lineData))\n        .attr('fill', 'none')\n        .attr('stroke', config.color)\n        .attr('stroke-width', 1.6);\n    });\n\n    return () => observer.disconnect();\n  });\n</script>\n\n<div class=\"timeline-container\" bind:this={timelineContainer} style=\"height: {height}; width: {width};\">\n  <div class=\"timeline-wrapper\" style=\"min-height: {getTimelineHeight()};\">\n    <div class=\"timeline-background\"></div>\n    <div class=\"timeline-line-container\">\n      <!-- Reemplazamos la línea original por un SVG para las 3 líneas -->\n      <svg class=\"timeline-lines\"></svg>\n    </div>\n    \n    <!-- Evento de Fundación -->\n    <div \n      class=\"timeline-step fundacion visible\"\n      style=\"top: {getRelativePosition(1952)}px\"\n    >\n      <div class=\"timeline-point fundacion\"></div>\n      <div class=\"timeline-content fundacion\">\n        <div class=\"year-badge fundacion\">{TROPA_INICIO}</div>\n        <h4>Fundación de la Tropa San Luis</h4>\n        <p class=\"fundacion-text\">Inicio de una gran aventura</p>\n      </div>\n    </div>\n\n    <!-- Décadas -->\n    {#each allDecades as decade}\n      <div \n        class=\"decade-marker\" \n        data-decade={decade} \n        style=\"top: {getRelativePosition(decade)}px\"\n      >\n        <div \n          class=\"decade-background\" \n          style=\"top: {getCampPosition(decade + 5, decade)}px\"\n        >\n          {decade}s\n        </div>\n        <div class=\"decade-header\">\n          <span class=\"decade-year\">{decade}s</span>\n          <div class=\"decade-line\"></div>\n        </div>\n        \n        <!-- Campamentos de esta década -->\n        {#each getCampsInDecade(decade) as camp, index}\n          <div \n            class=\"timeline-step\"\n            class:active={selectedYear === camp.año}\n            class:visible={visibleYears.has(camp.año)}\n            class:right={index % 2 === 0}\n            style=\"top: {getCampPosition(camp.año, decade)}px\"\n            data-year={camp.año}\n            on:click={() => selectCamp(camp)}\n            on:keydown={e => e.key === 'Enter' && selectCamp(camp)}\n            tabindex=\"0\"\n            role=\"button\"\n            aria-label=\"Campamento en {camp.lugar} del año {camp.año}\"\n          >\n            <div class=\"timeline-point\"></div>\n            <div class=\"timeline-content\">\n              <div class=\"year-badge\">{camp.año}</div>\n              <h4>{camp.lugar}</h4>\n            </div>\n          </div>\n        {/each}\n      </div>\n    {/each}\n  </div>\n</div>\n\n<style>\n  .timeline-container {\n    position: relative;\n    overflow-y: auto;\n    padding: 2rem;\n    background: var(--gray-100);\n    border-radius: 12px;\n    height: 100%;\n  }\n\n  .timeline-wrapper {\n    position: relative;\n    max-width: 1200px;\n    margin: 0 auto;\n    padding: 6rem 0;\n  }\n\n  .timeline-background {\n    position: fixed;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background: radial-gradient(circle at center, var(--gray-100) 0%, transparent 70%);\n    pointer-events: none;\n  }\n\n  .timeline-line-container {\n    position: absolute;\n    left: 50%;\n    top: 0;\n    bottom: 0;\n    /* Conservamos el ancho original para la posición, aunque el SVG interno tenga ancho mayor */\n    width: 6px;\n    transform: translateX(-50%);\n  }\n\n  /* Eliminamos el estilo original de .timeline-line, pues ahora usamos el SVG */\n\n  .timeline-step {\n    position: absolute;\n    left: 50%;\n    transform: translateX(-50%) translateY(-50%);\n    width: 100%;\n    height: 80px;\n    cursor: pointer;\n    transition: all 0.5s cubic-bezier(0.4, 0, 0.2, 1);\n    opacity: 0;\n    filter: blur(10px);\n    display: flex;\n    align-items: center;\n    z-index: 1; \n  }\n\n  .timeline-step.visible {\n    opacity: 1;\n    filter: blur(0);\n  }\n\n  .timeline-point {\n    position: absolute;\n    left: 50%;\n    top: 50%;\n    transform: translate(-50%, -50%);\n    width: 18px;\n    height: 18px;\n    border-radius: 50%;\n    background: var(--primary-color);\n    border: 4px solid white;\n    box-shadow: 0 0 0 6px rgba(2, 123, 168, 0.2); \n    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n    z-index: 2;\n  }\n\n  .timeline-point.fundacion {\n    width: 24px;\n    height: 24px;\n    background: white;\n    border: 4px solid var(--primary-color);\n    box-shadow: 0 0 0 8px rgba(241, 50, 50, 0.1);\n  }\n\n  .timeline-content {\n    position: absolute;\n    background: white;\n    padding: 1rem;\n    border-radius: 8px;\n    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n    width: calc(50% - 60px);\n    transition: all 0.3s ease;\n  }\n\n  .timeline-content.fundacion {\n    background: linear-gradient(135deg, var(--primary-color), var(--primary-dark));\n    color: white;\n  }\n\n  .timeline-step.right .timeline-content {\n    left: calc(50% + 40px);\n  }\n\n  .timeline-step:not(.right) .timeline-content {\n    right: calc(50% + 40px);\n  }\n\n  .year-badge {\n    display: inline-block;\n    padding: 0.25rem 0.5rem;\n    background: var(--secondary-color); /* Utilizamos el color secundario (rojo) */\n    color: white;\n    border-radius: 4px;\n    font-size: 0.75rem;\n    font-weight: 600;\n    margin-bottom: 0.5rem;\n  }\n\n  .year-badge.fundacion {\n    background: white;\n    color: var(--primary-color);\n  }\n\n  .timeline-content h4 {\n    margin: 0;\n    font-size: 0.9rem;\n    font-weight: 600;\n    color: var(--text-primary);\n  }\n\n  .timeline-content p {\n    margin: 0.5rem 0 0;\n    font-size: 0.8rem;\n    color: var(--text-secondary);\n  }\n\n  .fundacion-text {\n    margin-top: 0.5rem;\n    font-size: 0.9rem;\n    opacity: 0.9;\n  }\n\n  /* Estilos para las líneas de las décadas y demás elementos del timeline */\n  .decade-background {\n    position: absolute;\n    width: 100%;\n    height: calc(100% - 40px);\n    background: repeating-linear-gradient(\n      45deg,\n      rgba(241, 50, 50, 0.03),\n      rgba(241, 50, 50, 0.03) 10px,\n      transparent 10px,\n      transparent 20px\n    );\n    pointer-events: none;\n    z-index: 0;\n    opacity: 0.7;\n    font-size: 0;\n  }\n\n  .decade-marker {\n    position: absolute;\n    width: 100%;\n    z-index: 1;\n  }\n\n  .decade-header {\n    display: flex;\n    align-items: center;\n    gap: 1rem;\n    margin-bottom: 2rem;\n    position: relative;\n    z-index: 2;\n  }\n\n  .decade-year {\n    font-size: 1.2rem;\n    font-weight: 700;\n    color: white;\n    background: var(--primary-color); /* Azul para las décadas */\n    padding: 0.3rem 0.8rem;\n    border-radius: 8px;\n    box-shadow: var(--card-shadow);\n    min-width: 120px;\n    text-align: center;\n    position: relative;\n    z-index: 3;\n  }\n\n  .decade-line {\n    flex: 1;\n    height: 2px;\n    background: linear-gradient(\n      to right,\n      var(--primary-color),\n      transparent\n    );\n    opacity: 0.3;\n  }\n\n  /* Hover effects */\n  .timeline-step:hover .timeline-point,\n  .timeline-step.active .timeline-point {\n    transform: translate(-50%, -50%) scale(1.3);\n    background: var(--primary-light);\n    box-shadow: 0 0 0 8px rgba(241, 50, 50, 0.1);\n  }\n\n  .timeline-step:hover .timeline-content,\n  .timeline-step.active .timeline-content {\n    transform: translateY(-50%) scale(1.02);\n    box-shadow: var(--card-shadow-hover);\n  }\n\n  @media (max-width: 768px) {\n    .timeline-wrapper {\n      padding: 2rem 1rem;\n    }\n\n    .timeline-content {\n      width: calc(100% - 80px) !important;\n      left: 60px !important;\n      right: auto !important;\n      text-align: left !important;\n    }\n\n    .year-badge {\n      font-size: 0.65rem;\n    }\n\n    .decade-year {\n      font-size: 1rem;\n      padding: 0.2rem 0.5rem;\n    }\n  }\n</style>\n"
    },
    {
      "file": "src\\stores\\campData.js",
      "functions": [
        "createCampStore",
        "selectCamp",
        "reset"
      ],
      "classes": [],
      "comments": [],
      "content": "import { writable } from 'svelte/store';\nimport campamentosData from '../../data/campamentos.json';\n\nconst initialData = {\n  selectedCamp: null,\n  camps: campamentosData.campamentos.map(camp => ({\n    ...camp,\n    lat: camp.coordenadas.lat,\n    lng: camp.coordenadas.lng\n  }))\n};\n\nfunction createCampStore() {\n  const { subscribe, set, update } = writable(initialData);\n\n  return {\n    subscribe,\n    selectCamp: (camp) => update(state => ({ ...state, selectedCamp: camp })),\n    reset: () => set(initialData)\n  };\n}\n\nexport const campStore = createCampStore();\n"
    }
  ],
  "directories": [
    "data",
    "public",
    "src",
    "src\\components",
    "src\\stores",
    "src\\styles"
  ],
  "meta": {
    "total_files": 15,
    "total_directories": 6,
    "file_types": {
      ".json": 3,
      ".md": 1,
      ".js": 4,
      ".css": 1,
      ".html": 1,
      ".svelte": 5
    },
    "generated_at": "2025-02-04T22:29:02.616376"
  }
}